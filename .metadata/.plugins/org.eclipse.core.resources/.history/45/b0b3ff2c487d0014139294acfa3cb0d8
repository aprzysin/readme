import org.powerbot.script.Condition;
import org.powerbot.script.rt6.ClientContext;
import org.powerbot.script.rt6.GameObject;
import org.powerbot.script.rt6.Item;
import org.powerbot.script.rt6.Npc;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * kills lvl 1 rats
 * 
 * @author Andrew Przysinda
 *
 */
public class Eater extends Duty<ClientContext> {
	// used to recognize the food in the backpack
	private int food = 315;
	private double percent;
	public double getHealth() {
		return ((double) ctx.combatBar.health() / ctx.combatBar.maximumHealth()) * 100;
		}
	// gets the api methods for KillRat
	public Eater(ClientContext ctx) {
        super(ctx);
	}
	@Overide
	/**
	 * checks for initial conditions to be able kill the rat
	 * 
	 * @see http://www.powerbot.org/community/topic/1227292-health-percent/
	 */
	public boolean activate() {
		percent = ctx.combatBar.health() / ctx.combatBar.maximumHealth();
		// checks to see if there is a lvl 1 rat
		return 
				
		// checks to see if my character is doing nothing
		percent <= .99
				&&
		// checks to see if my character is alive
		percent > 0		
				&&
		// prevents this duty when there is no food
		ctx.backpack.select().id(food).count() > 0;
		
	}
	@Overide
	/**
	 * executes the programs if the initial conditions are met
	 * 
	 * @see https://www.powerbot.org/community/topic/1231541-how-to-stop-multiple-eatings-and-long-pauses/
	 */
    public void execute() {
		final Item edible= ctx.backpack.select().id(food).poll();
		System.out.println("Health Percent: " + percent);
		ctx.backpack.scroll(edible);
	    edible.interact("Eat");
	    // makes the method wait to prevent excessive food eating
	    Condition.wait(new Callable<Boolean>() {
	    	@Override
	    	public Boolean call() throws Exception {
	    		return !edible.valid();
	    	}
	    });
		
	}
		}
	
    


